syntax = "proto3";

package sc.internal.services.shard.v1;

import "sc/internal/common/shard/v1/types.proto";
import "sc/external/common/shard/v1/types.proto";
import "sc/external/common/network/v1/types.proto";
import "google/protobuf/timestamp.proto";

service ShardSupervisorService {
  rpc ReserveSeats ( .sc.internal.services.shard.v1.ReserveSeatsRequest ) returns ( .sc.internal.services.shard.v1.ReserveSeatsResponse );
  rpc GetSeat ( .sc.internal.services.shard.v1.GetSeatRequest ) returns ( .sc.internal.services.shard.v1.GetSeatResponse );
  rpc ReleaseSeats ( .sc.internal.services.shard.v1.ReleaseSeatsRequest ) returns ( .sc.internal.services.shard.v1.ReleaseSeatsResponse );
  rpc ModifySeatMap ( .sc.internal.services.shard.v1.ModifySeatMapRequest ) returns ( .sc.internal.services.shard.v1.ModifySeatMapResponse );
  rpc GatewayStream (stream .sc.internal.services.shard.v1.GatewayStreamRequest ) returns (stream .sc.internal.services.shard.v1.GatewayStreamResponse );
  rpc DGSStream (stream .sc.internal.services.shard.v1.DGSStreamRequest ) returns (stream .sc.internal.services.shard.v1.DGSStreamResponse );
}

message ReserveSeatsRequest {
  repeated .sc.internal.services.shard.v1.ReserveSeatsRequest.ReserveSeatCommand commands = 1;

  message ReserveSeatCommand {
    uint64 player_id = 1;
    .sc.external.common.shard.v1.SeatCriterias criterias = 2;
    .google.protobuf.Timestamp until = 3;
  }
}

message ReserveSeatsResponse {
  repeated .sc.internal.common.shard.v1.Reservation reservations = 1;
}

message GetSeatRequest {
  uint64 player_id = 1;
}

message GetSeatResponse {
  uint64 player_id = 1;
  .sc.internal.common.shard.v1.SeatStatus status = 2;
  .sc.external.common.shard.v1.SeatCriterias criterias = 3;
  .sc.internal.common.shard.v1.Reservation reservation = 4;
}

message ReleaseSeatsRequest {
  repeated uint64 player_id = 1;
}

message ReleaseSeatsResponse {
  repeated uint64 player_id = 1;
}

message ModifySeatMapRequest {
  repeated .sc.internal.common.shard.v1.CriteriaCountPair to_remove = 1;
  repeated .sc.internal.common.shard.v1.CriteriaCountPair to_add = 2;
}

message ModifySeatMapResponse {}

message GatewayStreamRequest {
  oneof request {
    .sc.internal.services.shard.v1.GatewayStreamRequest.PlayerConnected connected = 1;
    .sc.internal.services.shard.v1.GatewayStreamRequest.PlayerDisconnected disconnected = 2;
  }

  message PlayerConnected {
    uint64 player_id = 1;
  }
  message PlayerDisconnected {
    uint64 player_id = 1;
    bool expected = 2;
  }
}

message GatewayStreamResponse {
  oneof response {
    .sc.internal.services.shard.v1.GatewayStreamResponse.PlayerIncoming player_incoming = 1;
    .sc.internal.services.shard.v1.GatewayStreamResponse.PlayerCanceled player_canceled = 2;
  }

  message PlayerIncoming {
    uint64 player_id = 1;
    .sc.external.common.network.v1.CryptographicKeys keys = 2;
  }
  message PlayerCanceled {
    uint64 player_id = 1;
  }
}

message DGSStreamRequest {}

message DGSStreamResponse {}

