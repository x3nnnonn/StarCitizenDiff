syntax = "proto3";

package envoy.extensions.transport_sockets.tls.v3;

import "envoy/config/core/v3/base.proto";
import "envoy/config/core/v3/extension.proto";
import "envoy/type/matcher/v3/string.proto";
import "google/protobuf/any.proto";
import "google/protobuf/wrappers.proto";
import "envoy/annotations/deprecation.proto";
import "udpa/annotations/migrate.proto";
import "udpa/annotations/sensitive.proto";
import "udpa/annotations/status.proto";
import "udpa/annotations/versioning.proto";
import "validate/validate.proto";

message TlsParameters {
  .envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol tls_minimum_protocol_version = 1;
  .envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol tls_maximum_protocol_version = 2;
  repeated string cipher_suites = 3;
  repeated string ecdh_curves = 4;

  enum TlsProtocol {
    TLS_AUTO = 0;
    TLSv1_0 = 1;
    TLSv1_1 = 2;
    TLSv1_2 = 3;
    TLSv1_3 = 4;
  }
}

message PrivateKeyProvider {
  string provider_name = 1;
  oneof config_type {
    .google.protobuf.Any typed_config = 3;
  }
}

message TlsCertificate {
  .envoy.config.core.v3.DataSource certificate_chain = 1;
  .envoy.config.core.v3.DataSource private_key = 2;
  .envoy.config.core.v3.DataSource pkcs12 = 8;
  .envoy.config.core.v3.WatchedDirectory watched_directory = 7;
  .envoy.extensions.transport_sockets.tls.v3.PrivateKeyProvider private_key_provider = 6;
  .envoy.config.core.v3.DataSource password = 3;
  .envoy.config.core.v3.DataSource ocsp_staple = 4;
  repeated .envoy.config.core.v3.DataSource signed_certificate_timestamp = 5;
}

message TlsSessionTicketKeys {
  repeated .envoy.config.core.v3.DataSource keys = 1;
}

message CertificateProviderPluginInstance {
  string instance_name = 1;
  string certificate_name = 2;
}

message SubjectAltNameMatcher {
  .envoy.extensions.transport_sockets.tls.v3.SubjectAltNameMatcher.SanType san_type = 1;
  .envoy.type.matcher.v3.StringMatcher matcher = 2;

  enum SanType {
    SAN_TYPE_UNSPECIFIED = 0;
    EMAIL = 1;
    DNS = 2;
    URI = 3;
    IP_ADDRESS = 4;
  }
}

message CertificateValidationContext {
  .envoy.config.core.v3.DataSource trusted_ca = 1;
  .envoy.extensions.transport_sockets.tls.v3.CertificateProviderPluginInstance ca_certificate_provider_instance = 13;
  .envoy.config.core.v3.WatchedDirectory watched_directory = 11;
  repeated string verify_certificate_spki = 3;
  repeated string verify_certificate_hash = 2;
  repeated .envoy.extensions.transport_sockets.tls.v3.SubjectAltNameMatcher match_typed_subject_alt_names = 15;
  repeated .envoy.type.matcher.v3.StringMatcher match_subject_alt_names = 9 [ deprecated = true ];
  .google.protobuf.BoolValue require_signed_certificate_timestamp = 6;
  .envoy.config.core.v3.DataSource crl = 7;
  bool allow_expired_certificate = 8;
  .envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext.TrustChainVerification trust_chain_verification = 10;
  .envoy.config.core.v3.TypedExtensionConfig custom_validator_config = 12;
  bool only_verify_leaf_cert_crl = 14;
  .google.protobuf.UInt32Value max_verify_depth = 16;

  enum TrustChainVerification {
    VERIFY_TRUST_CHAIN = 0;
    ACCEPT_UNTRUSTED = 1;
  }
}

