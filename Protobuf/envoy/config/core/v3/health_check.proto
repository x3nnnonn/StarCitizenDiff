syntax = "proto3";

package envoy.config.core.v3;

import "envoy/config/core/v3/base.proto";
import "envoy/config/core/v3/event_service_config.proto";
import "envoy/type/matcher/v3/string.proto";
import "envoy/type/v3/http.proto";
import "envoy/type/v3/range.proto";
import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";
import "udpa/annotations/status.proto";
import "udpa/annotations/versioning.proto";
import "validate/validate.proto";

message HealthStatusSet {
  repeated .envoy.config.core.v3.HealthStatus statuses = 1;
}

message HealthCheck {
  .google.protobuf.Duration timeout = 1;
  .google.protobuf.Duration interval = 2;
  .google.protobuf.Duration initial_jitter = 20;
  .google.protobuf.Duration interval_jitter = 3;
  uint32 interval_jitter_percent = 18;
  .google.protobuf.UInt32Value unhealthy_threshold = 4;
  .google.protobuf.UInt32Value healthy_threshold = 5;
  .google.protobuf.UInt32Value alt_port = 6;
  .google.protobuf.BoolValue reuse_connection = 7;
  oneof health_checker {
    .envoy.config.core.v3.HealthCheck.HttpHealthCheck http_health_check = 8;
    .envoy.config.core.v3.HealthCheck.TcpHealthCheck tcp_health_check = 9;
    .envoy.config.core.v3.HealthCheck.GrpcHealthCheck grpc_health_check = 11;
    .envoy.config.core.v3.HealthCheck.CustomHealthCheck custom_health_check = 13;
  }
  .google.protobuf.Duration no_traffic_interval = 12;
  .google.protobuf.Duration no_traffic_healthy_interval = 24;
  .google.protobuf.Duration unhealthy_interval = 14;
  .google.protobuf.Duration unhealthy_edge_interval = 15;
  .google.protobuf.Duration healthy_edge_interval = 16;
  string event_log_path = 17;
  .envoy.config.core.v3.EventServiceConfig event_service = 22;
  bool always_log_health_check_failures = 19;
  .envoy.config.core.v3.HealthCheck.TlsOptions tls_options = 21;
  .google.protobuf.Struct transport_socket_match_criteria = 23;

  message Payload {
    oneof payload {
      string text = 1;
      bytes binary = 2;
    }
  }
  message HttpHealthCheck {
    string host = 1;
    string path = 2;
    .envoy.config.core.v3.HealthCheck.Payload send = 3;
    .envoy.config.core.v3.HealthCheck.Payload receive = 4;
    repeated .envoy.config.core.v3.HeaderValueOption request_headers_to_add = 6;
    repeated string request_headers_to_remove = 8;
    repeated .envoy.type.v3.Int64Range expected_statuses = 9;
    repeated .envoy.type.v3.Int64Range retriable_statuses = 12;
    .envoy.type.v3.CodecClientType codec_client_type = 10;
    .envoy.type.matcher.v3.StringMatcher service_name_matcher = 11;
  }
  message TcpHealthCheck {
    .envoy.config.core.v3.HealthCheck.Payload send = 1;
    repeated .envoy.config.core.v3.HealthCheck.Payload receive = 2;
  }
  message RedisHealthCheck {
    string key = 1;
  }
  message GrpcHealthCheck {
    string service_name = 1;
    string authority = 2;
    repeated .envoy.config.core.v3.HeaderValueOption initial_metadata = 3;
  }
  message CustomHealthCheck {
    string name = 1;
    oneof config_type {
      .google.protobuf.Any typed_config = 3;
    }
  }
  message TlsOptions {
    repeated string alpn_protocols = 1;
  }
}

enum HealthStatus {
  UNKNOWN = 0;
  HEALTHY = 1;
  UNHEALTHY = 2;
  DRAINING = 3;
  TIMEOUT = 4;
  DEGRADED = 5;
}

